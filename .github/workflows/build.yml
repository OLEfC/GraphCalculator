name: Build EXE

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup MSBuild (Visual Studio Build Tools)
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: 'latest'

      - name: NuGet Restore for C++/CLI solution
        run: |
          # Знаходимо .sln файл автоматично
          $slnFile = Get-ChildItem -Filter "*.sln" | Select-Object -First 1
          if ($slnFile) {
            Write-Host "Знайдено solution файл: $($slnFile.Name)"
            nuget restore $slnFile.Name
          } else {
            Write-Error "Не знайдено .sln файл"
            exit 1
          }
        shell: pwsh

      - name: Build C++/CLI solution with MSBuild
        run: |
          # Знаходимо .sln файл автоматично
          $slnFile = Get-ChildItem -Filter "*.sln" | Select-Object -First 1
          if ($slnFile) {
            Write-Host "Збираємо solution: $($slnFile.Name)"
            msbuild $slnFile.Name /p:Configuration=Release /m
          } else {
            Write-Error "Не знайдено .sln файл"
            exit 1
          }
        shell: pwsh

      - name: Copy all build files to release folder
        shell: pwsh
        run: |
          # Створюємо теку release, якщо її нема
          if (Test-Path release) {
            Remove-Item release -Recurse -Force
          }
          mkdir release

          # Показуємо структуру проекту для діагностики
          Write-Host "=== Структура проекту ==="
          Get-ChildItem -Path . -Recurse -Directory | Where-Object { $_.Name -eq "Release" -or $_.Name -eq "Debug" } | 
            ForEach-Object { Write-Host "Знайдено: $($_.FullName)" }

          # Знаходимо всі папки Release
          $releaseFolders = Get-ChildItem -Path . -Recurse -Directory -Filter "Release"
          
          Write-Host "=== Знайдені Release папки ==="
          $releaseFolders | ForEach-Object { 
            Write-Host "Release папка: $($_.FullName)"
            Write-Host "Файли в цій папці:"
            Get-ChildItem -Path $_.FullName | ForEach-Object { Write-Host "  - $($_.Name)" }
          }

          if ($releaseFolders.Count -eq 0) {
            Write-Error "НЕМАЄ жодної папки Release"
            exit 1
          }

          # Знаходимо папку Release з .exe файлами
          $targetFolder = $null
          foreach ($folder in $releaseFolders) {
            $exeFiles = Get-ChildItem -Path $folder.FullName -Filter "*.exe"
            if ($exeFiles.Count -gt 0) {
              $targetFolder = $folder
              Write-Host "Знайдено Release папку з .exe файлами: $($folder.FullName)"
              break
            }
          }

          if (-not $targetFolder) {
            # Якщо немає .exe, беремо першу Release папку
            $targetFolder = $releaseFolders | Select-Object -First 1
            Write-Host "Не знайдено .exe файли, використовуємо першу Release папку: $($targetFolder.FullName)"
          }

          # Копіюємо всі файли
          Copy-Item -Path "$($targetFolder.FullName)\*" -Destination release\ -Recurse -Force
          
          # Виводимо список файлів що були скопійовані
          Write-Host "=== Файли в release папці ==="
          Get-ChildItem -Path release -Recurse | ForEach-Object { 
            Write-Host "$($_.FullName) ($($_.Length) bytes)" 
          }

      - name: Upload Release artifact
        uses: actions/upload-artifact@v4
        with:
          name: GraphCalculator-Release
          path: release/
